const cluster = require('cluster');
const os = require('os');
const fs = require('fs');
const path = require('path');
const { fileURLToPath } = require('url');

/**
 * =================================================================
 * MODO ESTABLE ACTIVADO
 * =================================================================
 * * La siguiente l√≠nea es la clave de todo. Al poner 'false && ...', la
 * condici√≥n NUNCA se cumplir√°. Esto desactiva de forma segura el
 * c√≥digo que crea m√∫ltiples clones (workers) y nos asegura que el bot
 * siempre se ejecutar√° en el bloque 'else', como un √∫nico proceso
 * con un solo cerebro y memoria persistente.
 * * ¬°Adi√≥s a la inestabilidad!
 * */
if (false && cluster.isPrimary) {

    // NING√öN C√ìDIGO DENTRO DE ESTE BLOQUE SE EJECUTAR√Å JAM√ÅS.
    // Lo dejamos aqu√≠ por si en un futuro lejano quisieras revertir el cambio,
    // simplemente cambiando 'false' por 'true'.

    const numWorkers = os.cpus().length;
    console.log(`[üöÄ MODO DIOS] Proceso Primario ${process.pid} activado.`);
    console.log(`[üî•] Desplegando ${numWorkers} clones del bot para m√°xima potencia.`);

    const workers = [];
    for (let i = 0; i < numWorkers; i++) {
        const worker = cluster.fork();
        workers.push(worker);
    }
    // ...toda la l√≥gica de sincronizaci√≥n de sesiones queda desactivada.

} else {

    // ‚úÖ ESTE ES EL √öNICO C√ìDIGO QUE SE EJECUTAR√Å AL INICIAR.
    console.log(`[‚öôÔ∏è MODO ESTABLE] Bot iniciado en proceso √∫nico (PID: ${process.pid}). ¬°M√°xima fiabilidad!`);

    // Tu optimizaci√≥n de cach√© de RAM se mantiene, es una excelente pr√°ctica.
    const originalReadFileSync = fs.readFileSync;
    const fileCache = new Map();
    const filesToCache = [
        './travas/ios4.js', './travas/ios7.js', './travas/ios6.js',
        './travas/travadoc.js', './travas/crash.zip', './src/opa.webp',
        './src/foto.jpg', './src/thumb.jpg', './media/thumb.jpg', './media/ola.jpg'
    ];

    console.log(`[üß†] Precargando ${filesToCache.length} assets en la memoria RAM...`);
    filesToCache.forEach(filePath => {
        try {
            const absolutePath = path.resolve(__dirname, filePath);
            const fileContent = originalReadFileSync(absolutePath);
            fileCache.set(absolutePath, fileContent);
        } catch (error) {
            // Ignoramos si un archivo no existe para no detener el arranque.
        }
    });

    fs.readFileSync = (filePath, options) => {
        let pathAsString = filePath;
        if (filePath instanceof URL) {
            pathAsString = fileURLToPath(filePath);
        }
        const absolutePath = path.resolve(pathAsString);
        if (fileCache.has(absolutePath)) {
            return fileCache.get(absolutePath);
        }
        return originalReadFileSync(filePath, options);
    };
    console.log(`[üëç] Optimizaci√≥n de RAM aplicada correctamente.`);

    require('./main.js');
}